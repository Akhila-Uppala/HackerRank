'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}
function dynamicArray(n, queries) {
     let S = [];
    let lastAnswer = 0;
    let res = [];
    for (let i = 0; i < n; i++) {
        S[i] = [];
    }
    queries.forEach((el) => {
        
        const [q, x, y] = el.map(Number);
        const seq = (x ^ lastAnswer) % n;
        switch (q) {
        case 1:
            S[seq].push(y);
            break;
        case 2:
            const size = S[seq].length;
            const index = y % size;
            lastAnswer = S[seq][index];
            res.push(lastAnswer);
            break;
        }
    });
    return res;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const firstMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

    const n = parseInt(firstMultipleInput[0], 10);

    const q = parseInt(firstMultipleInput[1], 10);

    let queries = Array(q);

    for (let i = 0; i < q; i++) {
        queries[i] = readLine().replace(/\s+$/g, '').split(' ').map(queriesTemp => parseInt(queriesTemp, 10));
    }

    const result = dynamicArray(n, queries);

    ws.write(result.join('\n') + '\n');

    ws.end();
}
